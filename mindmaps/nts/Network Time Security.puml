@startmindmap

* Network Time Security (NTS)\nRFC 8915
** Requires
*** NTPv4
*** TLS 1.3
****_ TLS must comply with RFC 7525
****_ Implementations MUST NOT negotiate TLS versions earlier than 1.3 [RFC8446]
****_ Use of the Application-Layer Protocol Negotiation Extension [RFC7301] is integral to NTS, and support for it is REQUIRED for interoperability
** NTS Key Establishment
***_ Establishes the necessary key material between the NTP client and the server, using a Transport Layer Security (TLS) handshake (the same public key infrastructure as the web). Once the keys are exchanged, the TLS channel is closed and the protocol enters the second phase.
*** NTS Key Establishment (NTS-KE) Protocol
****_  a mechanism for establishing key material for use with the NTS Extension Fields for NTPv4
****_ uses **TLS** to establish keys, to provide the client with an initial supply of cookies, and to negotiate some additional protocol options. __After this, the TLS channel is **closed**__ with no per*client state remaining on the server side
**** TCP port 4460
**** Network Time Security Key Establishment **Record Types** (IANA)
***** End of Message
***** NTS Next Protocol Negotiation
******_ Network Time Security Next Protocols \n(IANA)
*******_ Network Time Protocol version 4 (NTPv4)
***** Error
******_ Network Time Security Error Code \n(IANA)
***** Warning
******_ Network Time Security Warning Code \n(IANA)
***** AEAD Algorithm Negotiation
******_ Authenticated Encryption with Associated Data (AEAD) Parameters \n(IANA) (RFC 5297)
*******_ AEAD_AES_SIV_CMAC_256 (mandatory support)
*******_ AEAD_AES_SIV_CMAC_384
*******_ AEAD_AES_SIV_CMAC_512
***** New Cookie for NTPv4
******_ Implemtation*defined, i.e., opaque to the client
***** NTPv4 Server Negotiation
******_ sent if NTPv4 server's address is different from the NTS-KE server's address
******_ ASCII string (one of)
*******_ IPv4 address
*******_ IPv6 address
*******_ fully qualified domain name (FQDN)
***** NTPv4 Port Negotiation
** NTP authentication
***_ Authenticates NTP time synchronization packets using the results of the TLS handshake.
*** NTS Extension Fields for NTPv4
****_ handles encryption and authentication during NTP time synchronization via extension fields in the NTP packets, and holds all required state only on the client via opaque cookies
*****_ cryptographically secures NTPv4 using __previously established key material__
*****_ All state is kept by the client and provided to the server in the form of an encrypted cookie supplied with each request
**** Unique Identifier
*****_ provides the client with a cryptographically strong means of detecting replayed packets
**** NTS Cookie
**** NTS Cookie Placeholder
**** NTS Authenticator and Encrypted Extension Fields
***** Nonce
******_ In cryptography, a nonce is an arbitrary number that can be used just once in a cryptographic communication.[1] It is often a random or pseudo*random number issued in an authentication protocol to ensure that old communications cannot be reused in replay attacks. They can also be useful as initialization vectors and in cryptographic hash functions.
***** Ciphertext

left side
**_ A mechanism for using Transport Layer Security (TLS) and Authenticated Encryption with Associated Data (AEAD) to provide cryptographic security for the client-server mode of the Network Time Protocol (NTP) [RFC 5905].
**_ specifies NTS __exclusively__ for the client-server mode of NTP
***_ protects only the client, and not the server, from replay

right side
* YANG model
** client
*** configuration
**** server
***** certificates ?
******_ Probably not needed (initially)
*******_ NTPSec: NetBSD needs the mozilla-rootcerts-openssl package and ca /etc/openssl/certs/ added to the server line.
*** state
**** association
**** report valid certificate?

* Questions
**_ Separate authentication for establishment and data exchange?
***_ cipher suites vs signature algorithms + AEAD algorithm for TLS ???
**_ is the whole message flow encrypted?



@endmindmap
