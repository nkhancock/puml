@startuml

   /'
     This file contains PlantUML source code to generate a UML diagram 
     that defines a statechart of an ANCP session (informational only)
     within the ANCP YANG data model.

     Comments or questions about this Broadband Forum PlantUML file
     should be directed to <mailto:help@broadband-forum.org>.

     Editor:      Nick Hancock, ADTRAN

     Editor:      Ludwig Pauwels, Nokia

     PS Leader:   Joey Boyd, ADTRAN

     WA Director: Joey Boyd, ADTRAN

     WA Director: Sven Ooghe, Nokia";

     Copyright (c) 2022, Broadband Forum

     Redistribution and use in source and binary forms, with or
     without modification, are permitted provided that the following
     conditions are met:

     1. Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

     2. Redistributions in binary form must reproduce the above
        copyright notice, this list of conditions and the following
        disclaimer in the documentation and/or other materials
        provided with the distribution.

     3. Neither the name of the copyright holder nor the names of its
        contributors may be used to endorse or promote products
        derived from this software without specific prior written
        permission.

     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
     CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,
     INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
     CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
     NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
     STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
     ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
     ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

     The above license is used as a license under copyright only.
     Please reference the Forum IPR Policy for patent licensing terms
     <https://www.broadband-forum.org/ipr-policy>.

     Any moral rights which are necessary to exercise under the above
     license grant are also deemed granted under this license.

     This version of this PlantUML source code is part of TR-383a5; 
     see the TR itself for full legal notices.";

     revision 2022-03-01 {
       description
         "Amendment 5.
          * Approval Date:    2022-03-01.
          * Publication Date: 2022-03-01.";
       reference
         "TR-383a5: Common YANG Modules
                    <https://www.broadband-forum.org/technical/download/
                             TR-383_Amendment-5.pdf>";
     }
  '/
  
  state "//session created//" as session  {

    note as N1
      This sequential concurrent composite state is represented by leaf 
      ""/bbf-ancp:ancp/bbf-ancp:partitions/bbf-ancp:partition""
      ""  /bbf-ancp:sessions/bbf-ancp:session/bbf-ancp:enable""
    end note

    state "enable=**false**" as session_disable
    state "enable=**true**" as session_enable
    
    note right of session_disable
      A disabled session 
      implies no alarms
    end note
    [*] -> session_enable
    session_enable -> session_disable : <edit-config> client disables session /\nclear any alarms 
    session_disable -left-> session_enable : <edit-config> client enables session
     
    --
    
    note as N2
      This sequential concurrent composite state is represented by leaf 
      ""/bbf-ancp:ancp/bbf-ancp:partitions/bbf-ancp:partition""
      ""  /bbf-ancp:sessions/bbf-ancp:session/bbf-ancp:oper-state""
    end note

    state "oper-state = **down**" as oper_state_down  
    state "oper-state = **up**" as oper_state_up  
    
    [*] -right-> oper_state_down 
    oper_state_down -> oper_state_up : [adjacency-protocol/adjacency-state = estab] 
    oper_state_up -> oper_state_down : [adjacency-protocol/adjacency-state != estab]
     
    --
  
    note as N3
      This sequential concurrent composite state is represented by leaf 
      ""/bbf-ancp:ancp/bbf-ancp:partitions/bbf-ancp:partition/bbf-ancp:sessions/bbf-ancp:session""
      ""  /bbf-ancp:network-access-server/bbf-ancp:connection-state""
    end note

  
    state "//establishing transport connection//" as transport_enabled {
      state "connection-state=\n**opening**" as transport_opening
      state "connection-state=\n**established**" as transport_estab
      state "connection-state=\n**closed**" as transport_closed
      state "connection-state=\n**malfunction**" as transport_malfunction
      
      transport_malfunction : entry / **raise 'nas-not-reachable' alarm**  
      transport_malfunction : exit / **clear 'nas-not-reachable' alarm**  
      [*] -> transport_opening : [address valid] / send SYN 
      [*] -> transport_malfunction : [address invalid] 
      transport_opening --> transport_estab : SYN+ACK \n/ send ACK
       
      transport_estab -> transport_closed : [adjacency-state = \nmalfunction] / send FIN
      transport_opening --> transport_malfunction : connection cannot \nbe established
      transport_estab -> transport_opening : connection lost  
      transport_estab -[hidden]down-> transport_malfunction
      transport_malfunction -> transport_estab : SYN+ACK / send ACK
    }

    state "connection-state=\n**disabled**" as transport_disabled
    [*] --> transport_disabled : [session/enable=false]
    [*] --> transport_enabled : [session/enable=true]
    transport_enabled -left-> transport_disabled : [session/enable=false] / \n**clear alarms**
    transport_disabled -right-> transport_enabled : [session/enable=true]
    
    
    --

    note as N4
      This sequential concurrent composite state is represented by leaf 
      ""/bbf-ancp:ancp/bbf-ancp:partitions/bbf-ancp:partition/bbf-ancp:sessions/bbf-ancp:session""
      ""  /bbf-ancp:adjacency-protocol/bbf-ancp:adjacency-state""
    end note

    state "//establishing adjacency//" as adjacency_enable {
      state "adjacency-state=\n**pending**" as pending
      
      state "adjacency-state=\n**malfunction**" as adjacency_malfunction
      adjacency_malfunction : entry / drop transport layer, halt ANCP session
      note bottom of adjacency_malfunction : Session is halted; a session may be recovered by invoking the action 'reset' or disabling then enabling the session 
      
      state "//setting up the Adjacency Protocol//" as adj_prot {
        note "See NOTE 1" as N5 
        
        state "adjacency-state=\n**synchronization-lost**" as sync_lost
        sync_lost : entry / **raise 'adjacency-failure' alarm**
        sync_lost : exit / **clear 'adjacency-failure' alarm**
        state "adjacency-state=\n**synsent**" as SYNSENT
        SYNSENT : entry / start liveness-timer
        SYNSENT : exit / liveness count = 0
        SYNSENT : liveness-timer expires [liveness count < 2] / send SYN, increment liveness count, start liveness-timer
        state "adjacency-state=\n**synrcvd**" as SYNRCVD
        SYNRCVD : entry / start liveness-timer
        SYNRCVD : liveness-timer expires [liveness count < 2] / send SYNACK, increment liveness count
        SYNRCVD : exit / liveness count = 0
        state "adjacency-state=\n**estab**" as ESTAB
        ESTAB : entry / start liveness-timer
        ESTAB : exit / liveness count = 0
        ESTAB : liveness-timer expires [liveness count < 2] / send ACK, increment liveness count, start liveness-timer
        ESTAB : ACK received / liveness count = 0, start liveness-timer

        note right of sync_lost : See NOTE 2         
        note left of ESTAB : See NOTE 3
        
        [*] --> SYNSENT : / send SYN, liveness count = 0
        SYNSENT --> ESTAB : SYNACK received / \nsend ACK
        SYNSENT --> SYNSENT : ACK received / \nsend RSTACK
        SYNRCVD --> SYNRCVD : SYN received / \nsend SYNACK 
        SYNRCVD --> ESTAB : SYNACK received / send ACK
        ESTAB --> ESTAB : SYN or SYNACK received / send ACK
        SYNSENT --> SYNRCVD : SYN received / \nsend SYNACK
        

        SYNSENT--> sync_lost : liveness-timer expires \n[liveness count = 2] \n/ send RSTACK
        SYNRCVD --> sync_lost : liveness-timer expires \n[liveness count = 2] \n/ send RSTACK
        ESTAB --> sync_lost : liveness-timer expires \n[liveness count = 2]  \n/ send RSTACK
        sync_lost -right-> SYNRCVD : SYN received /\n send SYNACK

      }
      
      [*] -down-> pending
      pending -down-> adj_prot : [network-access-server /\nconnection-state = established]  
      adj_prot -up-> pending : [network-access-server /\nconnection-state != established] 

      adj_prot -down-> adjacency_malfunction : request message type not implemented /\n **raise "message-type-not-supported" alarm**, \nclose transport connection
      adj_prot -down-> adjacency_malfunction : capability negotiation failure /\n **raise "capability-negotiation-failure" alarm**, \nclose transport connection

    }

    state "adjacency-state=\n**disabled**" as adjacency_disabled
    
    
    [*] --> adjacency_enable : [session/enable=true]
    [*] --> adjacency_disabled : [session/enable=false]
    adjacency_enable -left-> adjacency_disabled : [session/enable=true] / \n**clear alarms**
    adjacency_disabled -right-> adjacency_enable : [session/enable=true]
      
      
  }

  [*] --> session : <edit-config>: create session 
  
  session -> session : reset() /\n **clear alarms**

@enduml
